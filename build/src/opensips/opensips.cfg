####### Global Parameters #########

/* uncomment the following lines to enable debugging */
#debug_mode=yes

log_level=3
stderror_enabled=no
stderror_level_filter=2
syslog_enabled=yes
syslog_facility=LOG_LOCAL0

udp_workers=2

/* uncomment the next line to enable the auto temporary blacklisting of
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns
   lookup failures (default disabled) */
#dns_try_ipv6=yes

socket=tls:0.0.0.0:TLS_PORT
socket=wss:0.0.0.0:WSS_PORT
socket=hep_udp:127.0.0.1:HEPS_PORT use_workers 1

####### Modules Section ########

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
#loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
#modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/run/opensips/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### Local cache
loadmodule "cachedb_local.so"
modparam("cachedb_local", "cachedb_url", "local://")

#### Tracer module to see the traffic over sngrep
#### sngrep -L udp:127.0.0.1:HEPD_PORT port HEPD_PORT
loadmodule "proto_hep.so"
modparam("proto_hep", "hep_id", "[hep_dst] 127.0.0.1:HEPD_PORT; transport=udp; version=3")
loadmodule "tracer.so"
modparam("tracer", "trace_on", 1)
modparam("tracer", "trace_id", "[sngrep]uri=hep:hep_dst")

loadmodule "proto_tls.so"
modparam("proto_tls", "tls_port", TLS_PORT)
modparam("proto_tls", "tls_handshake_timeout", 3000)
modparam("proto_tls", "tls_send_timeout", 3000)
modparam("proto_tls", "tls_async_local_connect_timeout", 3000)
modparam("proto_tls", "tls_async_handshake_timeout", 3000)
# WebSocket part
loadmodule "proto_wss.so"
modparam("proto_wss", "wss_handshake_timeout", 3000)
modparam("proto_wss", "wss_tls_handshake_timeout", 3000)
modparam("proto_wss", "require_origin", no)

loadmodule "tls_openssl.so"
loadmodule "tls_mgm.so"

modparam("tls_mgm", "client_domain", "client")
modparam("tls_mgm", "certificate", "[client]/etc/ssl/certs/ssl-cert-snakeoil.pem")
modparam("tls_mgm", "private_key", "[client]/etc/ssl/private/ssl-cert-snakeoil.key")
modparam("tls_mgm", "ca_list", "[client]/etc/ssl/certs/ca-certificates.crt")
modparam("tls_mgm", "verify_cert", "[client]0")
modparam("tls_mgm", "require_cert", "[client]0")

modparam("tls_mgm", "server_domain", "server")
modparam("tls_mgm", "certificate", "[server]/etc/ssl/certs/ssl-cert-snakeoil.pem")
modparam("tls_mgm", "private_key", "[server]/etc/ssl/private/ssl-cert-snakeoil.key")
modparam("tls_mgm", "ca_list", "[server]/etc/ssl/certs/ca-certificates.crt")
modparam("tls_mgm", "verify_cert", "[server]0")
modparam("tls_mgm", "require_cert", "[server]0")

####### Routing Logic ########

# main request routing logic

route {

    trace("sngrep", "t", "sip");

    if (!mf_process_maxfwd_header(10)) {
        xlog("L_NOTICE", "[$rm][MAIN_ROUTE] Too Many Hops, discarding...\n");

        send_reply(483, "Too Many Hops");
        exit;
    }

    # absorb retransmissions, but do not create transaction
    t_check_trans();

    route(withindlg);

    # Not really needed, but to make it complient with https://www.rfc-editor.org/rfc/rfc3581#section-4
    add_local_rport();

    route(initial_route_handling);
    route(relay);
}


route[initial_route_handling] {
    if (has_totag()) {
        return;
    }

    # PJSUA sets Route header to 127.0.0.1. We need to remove this preloaded route
    if ($socket_in(proto) == "tls" && $(hdr(Route)) =~ "sip:127.0.0.1") {
        remove_hf("Route");
    }

    if ($socket_in(proto) == "wss") {
        $var(added_route) = "sip:127.0.0.1:TLS_PORT;transport=tls;lr;r2=on;ftag=" + $ft;
        insert_hf("Record-Route: <$var(added_route)>\r\n");

        xlog("L_NOTICE", "[$rm][INITIAL_ROUTE_HANDLING]: Adding route $var(added_route) towards voip_patrol\n");
    }
}

route[loose_route] {

    if (!($(hdr(Route)[0]) =~ "sip:127.0.0.1")) {
        return;
    }

    xlog("L_NOTICE", "[$rm][LOOSE_ROUTE]: Processing loose_route...\n");

    remove_hf("Route");

    $var(i) = 1;
    while ($var(i) < $hdrcnt(Route)) {

        xlog("L_NOTICE", "[$rm][LOOSE_ROUTE] Restoring route header [$var(i)]: $(hdr(Route)[$var(i)])\n");

        append_hf("Route: $(hdr(Route)[$var(i)])\r\n");
        $var(i) = $var(i) + 1;
    }

    if ($hdrcnt(Route) == 1 ) {
        xlog("L_NOTICE", "[$rm][LOOSE_ROUTE] No more routes to restore\n");

        return;
    }

    $var(rt_next) = $(hdr(Route)[1]);
    $var(rt_next_nameaddr) = $(var(rt_next){nameaddr.uri});
    if ($var(rt_next_nameaddr) != "") {
        $var(rt_next) = $var(rt_next_nameaddr);
    }

    $var(loose_route_du) = $(var(rt_next){uri.schema}) + ":" + $(var(rt_next){uri.host}) + ":" + $(var(rt_next){uri.port});

    if ($(var(loose_route_du){s.len}) == 2) {
        return;
    }

    $du = $var(loose_route_du);

    xlog("L_NOTICE", "[$rm][LOOSE_ROUTE] Routing via Route header [1]: $var(rt_next) -> $var(loose_route_du)\n");
}

route[withindlg] {
    if (!has_totag()) {
        return;
    }
    # Own-crafted loose route
    route(loose_route);
}

route[set_destination] {

    if ($socket_in(proto) == "tls") {
        # We got connection from TLS, route it to WebSocket and save source of the message

        if ($du == "") {
            ruri_del_param("transport");
            ruri_add_param("transport=wss");
        }

        $socket_out = "wss:0.0.0.0:WSS_PORT";

        $var(source_uri) = "sip:" + $si + ":" + $sp;

        xlog("L_NOTICE", "[$rm][SET_DESTINATION][TLS] Got $rm from <$var(source_uri)> over TLS, sending to <$du>/<$ru> over WebSocket...\n");

        # Knowing that we are using vp_acc as contact alias for voip_patrol account - use this information
        $var(vp_acc) = $(ct.fields(uri){uri.param,vp_acc});
        if ($var(vp_acc) != NULL && $var(vp_acc) != "") {
            cache_store("local", "$var(vp_acc)", $var(source_uri));

            xlog("L_NOTICE", "[$rm][SET_DESTINATION][TLS] Saved source <$var(source_uri)> based on Contact vp_acc=<$var(vp_acc)>\n");
        }

        cache_store("local", "$ci", $var(source_uri));
        cache_store("local", "last_tls", $var(source_uri));

        return;
    }

    # We got a connection from WebSocket.

    ruri_del_param("transport");
    ruri_add_param("transport=tls");

    $socket_out = "tls:0.0.0.0:TLS_PORT";

    xlog("L_NOTICE", "[$rm][SET_DESTINATION][WSS] Got message over WebSocker, sending to TLS...\n");

    if ($du != NULL) {
        xlog("L_NOTICE", "[$rm][SET_DESTINATION][WSS] Explicit routing to <$du>. Error?\n");

        return;
    }

    $du = "sip:127.0.0.1:VP_TLS_PORT";

    $var(vp_acc) = $(ru{uri.param,vp_acc});
    if ($var(vp_acc) != NULL && $var(vp_acc) != "" && cache_fetch("local", "$var(vp_acc)", $var(du))) {
        xlog("L_NOTICE", "[$rm][SET_DESTINATION][WSS] Set destination <$du> based on the vp_acc = <$var(vp_acc)>\n");

        $du = $var(du);
        return;
    }

    if (cache_fetch("local", "$ci", $var(du))) {
        xlog("L_NOTICE", "[$rm][SET_DESTINATION][WSS] Set destination <$du> based on the CallID = <$ci>\n");

        $du = $var(du);
        return;
    }

    if (cache_fetch("local", "last_tls", $var(du))) {
        xlog("L_NOTICE", "[$rm][SET_DESTINATION][WSS] Set destination <$du> based on the last seen TLS connection\n");

        $du = $var(du);
        return;
    }

    xlog("L_NOTICE", "[$rm][SET_DESTINATION][WSS] Set destination <$du> based on the default value\n");
}

route[relay] {
    route(set_destination);

    if (!t_relay()) {
        xlog("L_NOTICE", "[$rm][RELAY] Relay to <$du>/<$ru> failed.\n");

        send_reply(500, "Internal Error");
    }
    exit;
}

onreply_route {
    if (is_method("INVITE|UPDATE") && $rs == 200) {
        # Make sure subsequent ACKs/BYEs will be sent in correct way
        if ($socket_in(proto) == "wss") {
            # Need to set TLS interface as a contact field
            $var(added_route) = "sip:127.0.0.1:TLS_PORT;transport=tls;lr;r2=on;ftag=" + $ft;

            append_hf("Record-Route: <$var(added_route)>\r\n");

            xlog("L_NOTICE", "[$rm][REPLY][$rs] received a reply: Adding route $var(added_route) towards voip_patrol\n");

        } else {
            # Here we need to clean up our Record-Route
            route(record_route_cleanup_reply);

            xlog("L_NOTICE", "[$rm][REPLY][$rs] received a reply: Not adding route towards WSS\n");
        }
    }
}

route[record_route_cleanup_reply] {
    if (!($(hdr(Record-Route)[0]) =~ "sip:127.0.0.1")) {
        return;
    }

    remove_hf("Record-Route");

    $var(i) = 1;
    while ($var(i) < $hdrcnt(Record-Route)) {

        xlog("L_NOTICE", "[$rm][RECORD_ROUTE_CLEANUP_REPLY][$rs] Restoring record-route header [$var(i)]: $(hdr(Record-Route)[$var(i)])\n");

        append_hf("Record-Route: $(hdr(Record-Route)[$var(i)])\r\n");
        $var(i) = $var(i) + 1;
    }
}
